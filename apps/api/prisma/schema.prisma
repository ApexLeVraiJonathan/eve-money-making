// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TypeId {
  id        Int      @id @map("type_id")
  published Boolean
  name      String   @map("type_name")
  volume    Decimal? @map("volume_m3") @db.Decimal(28, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  marketTrades MarketOrderTradeDaily[]

  @@map("item_types")
}

model RegionId {
  id        Int             @id @map("region_id")
  name      String          @map("region_name")
  systems   SolarSystemId[]
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")

  marketTrades MarketOrderTradeDaily[]

  @@map("regions")
}

model SolarSystemId {
  id        Int         @id @map("solar_system_id")
  regionId  Int         @map("region_id")
  region    RegionId    @relation(fields: [regionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  stations  StationId[]
  name      String      @map("solar_system_name")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@index([regionId])
  @@map("solar_systems")
}

model StationId {
  id             Int              @id @map("station_id")
  solarSystemId  Int              @map("solar_system_id")
  solarSystem    SolarSystemId    @relation(fields: [solarSystemId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  name           String           @map("station_name")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  TrackedStation TrackedStation[]

  marketTrades MarketOrderTradeDaily[]

  @@index([solarSystemId])
  @@map("stations")
}

model TrackedStation {
  id        String    @id @default(uuid()) @map("id")
  stationId Int       @map("station_id")
  station   StationId @relation(fields: [stationId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([stationId])
  @@map("tracked_stations")
}

/// Daily aggregated market order trades per station and type
model MarketOrderTradeDaily {
  // Composite primary key for a unique daily aggregate per station/type/side
  scanDate   DateTime @map("scan_date") @db.Date
  locationId Int      @map("location_id")
  typeId     Int      @map("type_id")
  isBuyOrder Boolean  @map("is_buy_order")

  regionId Int     @map("region_id")
  hasGone  Boolean @map("has_gone")
  amount   Int     @map("amount")
  high     Decimal @map("high") @db.Decimal(28, 2)
  low      Decimal @map("low") @db.Decimal(28, 2)
  avg      Decimal @map("avg") @db.Decimal(28, 2)
  orderNum Int     @map("order_num")
  iskValue Decimal @map("isk_value") @db.Decimal(28, 2)

  // Relations
  region  RegionId  @relation(fields: [regionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  type    TypeId    @relation(fields: [typeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  station StationId @relation(fields: [locationId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([scanDate, locationId, typeId, isBuyOrder])
  @@index([regionId])
  @@index([locationId])
  @@index([typeId])
  @@map("market_order_trades_daily")
}

/// Cache for ESI responses (ETag/Expires-aware)
model EsiCacheEntry {
  key          String    @id @map("key")
  etag         String?   @map("etag")
  lastModified String?   @map("last_modified")
  expiresAt    DateTime? @map("expires_at")
  status       Int?      @map("status")
  body         Json?     @map("body")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@index([expiresAt])
  @@map("esi_cache_entries")
}

/// Users of the application (can be single owner for now)
model User {
  id        String   @id @default(uuid()) @map("id")
  email     String?  @unique @map("email")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  characters EveCharacter[]

  @@map("app_users")
}

/// Linked EVE characters
model EveCharacter {
  id        Int      @id @map("character_id")
  name      String   @map("character_name")
  ownerHash String   @map("owner_hash")
  userId    String?  @map("user_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  token CharacterToken?

  @@index([ownerHash])
  @@map("eve_characters")
}

/// Stored tokens per character (one active token set per character)
model CharacterToken {
  id                   String       @id @default(uuid()) @map("id")
  characterId          Int          @unique @map("character_id")
  character            EveCharacter @relation(fields: [characterId], references: [id], onDelete: Cascade)
  tokenType            String       @map("token_type")
  accessToken          String       @map("access_token")
  accessTokenExpiresAt DateTime     @map("access_expires_at")
  refreshTokenEnc      String       @map("refresh_token_enc")
  scopes               String       @map("scopes")
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")

  @@map("character_tokens")
}

/// Snapshot of a planned execution (request + result) for later reconciliation
model PlanCommit {
  id               String             @id @default(uuid()) @map("id")
  request          Json               @map("request")
  result           Json               @map("result")
  memo             String?            @map("memo")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  CycleLedgerEntry CycleLedgerEntry[]

  @@map("plan_commits")
}

/// Investment cycles for grouping commits and cash flows
model Cycle {
  id        String    @id @default(uuid()) @map("id")
  name      String?   @map("name")
  startedAt DateTime  @map("started_at")
  closedAt  DateTime? @map("closed_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  ledgerEntries CycleLedgerEntry[]

  @@map("cycles")
}

/// Ledger entries (deposits, withdrawals, executions, fees) for a cycle
model CycleLedgerEntry {
  id           String      @id @default(uuid()) @map("id")
  cycleId      String      @map("cycle_id")
  cycle        Cycle       @relation(fields: [cycleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  occurredAt   DateTime    @default(now()) @map("occurred_at")
  entryType    String      @map("entry_type")
  amount       Decimal     @map("amount_isk") @db.Decimal(28, 2)
  memo         String?     @map("memo")
  planCommitId String?     @map("plan_commit_id")
  planCommit   PlanCommit? @relation(fields: [planCommitId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([cycleId])
  @@index([planCommitId])
  @@map("cycle_ledger")
}
