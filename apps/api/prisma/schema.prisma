generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Character platform role (authorization)
enum CharacterRole {
  USER
  LOGISTICS
}

/// Character management type (user-owned vs system-owned)
enum CharacterManagedBy {
  USER
  SYSTEM
}

/// Character function for trading workflows
enum CharacterFunction {
  SELLER
  BUYER
}

/// Home market/location for convenience filtering
enum CharacterLocation {
  JITA
  DODIXIE
  AMARR
  HEK
  RENS
  CN
}

/// Participation status for user opt-ins to cycles
enum ParticipationStatus {
  AWAITING_INVESTMENT
  AWAITING_VALIDATION
  OPTED_IN
  OPTED_OUT
  COMPLETED
  REFUNDED
}

model TypeId {
  id        Int      @id @map("type_id")
  published Boolean
  name      String   @map("type_name")
  volume    Decimal? @map("volume_m3") @db.Decimal(28, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  marketTrades MarketOrderTradeDaily[]

  @@map("item_types")
}

model RegionId {
  id        Int             @id @map("region_id")
  name      String          @map("region_name")
  systems   SolarSystemId[]
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")

  marketTrades MarketOrderTradeDaily[]

  @@map("regions")
}

model SolarSystemId {
  id        Int         @id @map("solar_system_id")
  regionId  Int         @map("region_id")
  region    RegionId    @relation(fields: [regionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  stations  StationId[]
  name      String      @map("solar_system_name")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@index([regionId])
  @@map("solar_systems")
}

model StationId {
  id             Int              @id @map("station_id")
  solarSystemId  Int              @map("solar_system_id")
  solarSystem    SolarSystemId    @relation(fields: [solarSystemId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  name           String           @map("station_name")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  TrackedStation TrackedStation[]

  marketTrades MarketOrderTradeDaily[]

  @@index([solarSystemId])
  @@map("stations")
}

model TrackedStation {
  id        String    @id @default(uuid()) @map("id")
  stationId Int       @map("station_id")
  station   StationId @relation(fields: [stationId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([stationId])
  @@map("tracked_stations")
}

/// Daily aggregated market order trades per station and type
model MarketOrderTradeDaily {
  // Composite primary key for a unique daily aggregate per station/type/side
  scanDate   DateTime @map("scan_date") @db.Date
  locationId Int      @map("location_id")
  typeId     Int      @map("type_id")
  isBuyOrder Boolean  @map("is_buy_order")

  regionId Int     @map("region_id")
  hasGone  Boolean @map("has_gone")
  amount   Int     @map("amount")
  high     Decimal @map("high") @db.Decimal(28, 2)
  low      Decimal @map("low") @db.Decimal(28, 2)
  avg      Decimal @map("avg") @db.Decimal(28, 2)
  orderNum Int     @map("order_num")
  iskValue Decimal @map("isk_value") @db.Decimal(28, 2)

  // Relations
  region  RegionId  @relation(fields: [regionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  type    TypeId    @relation(fields: [typeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  station StationId @relation(fields: [locationId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([scanDate, locationId, typeId, isBuyOrder])
  @@index([regionId])
  @@index([locationId])
  @@index([typeId])
  @@map("market_order_trades_daily")
}

/// Cache for ESI responses (ETag/Expires-aware)
model EsiCacheEntry {
  key          String    @id @map("key")
  etag         String?   @map("etag")
  lastModified String?   @map("last_modified")
  expiresAt    DateTime? @map("expires_at")
  status       Int?      @map("status")
  body         Json?     @map("body")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@index([expiresAt])
  @@map("esi_cache_entries")
}

/// Users of the application (can be single owner for now)
model User {
  id                 String        @id @default(uuid()) @map("id")
  email              String?       @unique @map("email")
  role               String        @default("USER") @map("role")
  primaryCharacterId Int?          @unique @map("primary_character_id")
  primaryCharacter   EveCharacter? @relation("UserPrimaryCharacter", fields: [primaryCharacterId], references: [id], onDelete: SetNull)
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  characters EveCharacter[] @relation("UserCharacters")

  @@map("app_users")
}

/// Linked EVE characters
model EveCharacter {
  id               Int                @id @map("character_id")
  name             String             @map("character_name")
  ownerHash        String             @map("owner_hash")
  userId           String?            @map("user_id")
  user             User?              @relation("UserCharacters", fields: [userId], references: [id], onDelete: SetNull)
  userAsPrimaryFor User?              @relation("UserPrimaryCharacter")
  role             CharacterRole      @default(USER) @map("role")
  function         CharacterFunction? @map("function")
  location         CharacterLocation? @map("location")
  managedBy        CharacterManagedBy @default(USER) @map("managed_by")
  notes            String?            @map("notes")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")

  token CharacterToken?

  @@index([ownerHash])
  @@index([userId])
  @@map("eve_characters")
}

/// Stored tokens per character (one active token set per character)
model CharacterToken {
  id                   String       @id @default(uuid()) @map("id")
  characterId          Int          @unique @map("character_id")
  character            EveCharacter @relation(fields: [characterId], references: [id], onDelete: Cascade)
  tokenType            String       @map("token_type")
  accessToken          String       @map("access_token")
  accessTokenExpiresAt DateTime     @map("access_expires_at")
  refreshTokenEnc      String       @map("refresh_token_enc")
  scopes               String       @map("scopes")
  lastRefreshAt        DateTime?    @map("last_refresh_at")
  refreshFailAt        DateTime?    @map("refresh_fail_at")
  refreshFailMsg       String?      @map("refresh_fail_msg")
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")

  @@map("character_tokens")
}

/// Investment cycles for grouping commits and cash flows
model Cycle {
  id        String    @id @default(uuid()) @map("id")
  name      String?   @map("name")
  startedAt DateTime  @map("started_at")
  closedAt  DateTime? @map("closed_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  /// Optional: amount of new ISK injected at cycle start (user-provided)
  initialInjectionIsk Decimal? @map("initial_injection_isk") @db.Decimal(28, 2)
  /// Optional: total starting capital at cycle start (injection + carryover cash/inventory)
  initialCapitalIsk   Decimal? @map("initial_capital_isk") @db.Decimal(28, 2)

  ledgerEntries     CycleLedgerEntry[]
  CycleCapitalCache CycleCapitalCache[]
  participations    CycleParticipation[]
  cycleLines        CycleLine[]
  cycleFeeEvents    CycleFeeEvent[]
  cycleSnapshots    CycleSnapshot[]

  @@map("cycles")
}

/// Cached capital/NAV snapshot per cycle
model CycleCapitalCache {
  cycleId   String   @id @map("cycle_id")
  asOf      DateTime @map("as_of")
  snapshot  Json     @map("snapshot")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  cycle Cycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@map("cycle_capital_cache")
}

/// Ledger entries for investor cash flows ONLY (deposits, withdrawals, payouts)
/// NOTE: No longer used for executions (buys/sells). Use BuyAllocation/SellAllocation instead.
model CycleLedgerEntry {
  id         String   @id @default(uuid()) @map("id")
  cycleId    String   @map("cycle_id")
  cycle      Cycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  occurredAt DateTime @default(now()) @map("occurred_at")
  entryType  String   @map("entry_type") // deposit | withdrawal | payout
  amount     Decimal  @map("amount_isk") @db.Decimal(28, 2)
  memo       String?  @map("memo")

  /// Link to user participation when this entry represents a deposit/refund/payout
  participationId String?             @map("participation_id")
  participation   CycleParticipation? @relation(fields: [participationId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([cycleId])
  @@index([participationId])
  @@index([entryType])
  @@map("cycle_ledger")
}

/// Raw ESI wallet transactions (idempotent store)
model WalletTransaction {
  characterId   Int      @map("character_id")
  transactionId BigInt   @map("transaction_id")
  date          DateTime @map("date")
  isBuy         Boolean  @map("is_buy")
  locationId    Int      @map("location_id")
  typeId        Int      @map("type_id")
  clientId      Int?     @map("client_id")
  quantity      Int      @map("quantity")
  unitPrice     Decimal  @map("unit_price") @db.Decimal(28, 2)
  journalRefId  BigInt?  @map("journal_ref_id")
  createdAt     DateTime @default(now()) @map("created_at")

  @@id([characterId, transactionId])
  @@index([characterId])
  @@index([date])
  @@map("wallet_transactions")
}

/// Raw ESI wallet journal entries (idempotent store)
model WalletJournalEntry {
  characterId   Int      @map("character_id")
  journalId     BigInt   @map("journal_id")
  date          DateTime @map("date")
  refType       String   @map("ref_type")
  amount        Decimal  @map("amount") @db.Decimal(28, 2)
  balance       Decimal? @map("balance") @db.Decimal(28, 2)
  contextId     BigInt?  @map("context_id")
  contextIdType String?  @map("context_id_type")
  description   String?  @map("description")
  reason        String?  @map("reason")
  firstPartyId  Int?     @map("first_party_id")
  secondPartyId Int?     @map("second_party_id")
  tax           Decimal? @map("tax") @db.Decimal(28, 2)
  taxReceiverId Int?     @map("tax_receiver_id")
  createdAt     DateTime @default(now()) @map("created_at")

  @@id([characterId, journalId])
  @@index([characterId])
  @@index([date])
  @@map("wallet_journal")
}

/// User participation (opt-in) for upcoming investment cycles
model CycleParticipation {
  id              String              @id @default(uuid()) @map("id")
  cycleId         String              @map("cycle_id")
  cycle           Cycle               @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  userId          String?             @map("user_id")
  characterName   String              @map("character_name")
  amountIsk       Decimal             @map("amount_isk") @db.Decimal(28, 2)
  memo            String              @map("memo") // Removed @unique - same memo for all users in a cycle
  status          ParticipationStatus @map("status")
  walletJournalId BigInt?             @map("wallet_journal_id")
  validatedAt     DateTime?           @map("validated_at")
  optedOutAt      DateTime?           @map("opted_out_at")
  refundAmountIsk Decimal?            @map("refund_amount_isk") @db.Decimal(28, 2)
  refundedAt      DateTime?           @map("refunded_at")
  payoutAmountIsk Decimal?            @map("payout_amount_isk") @db.Decimal(28, 2)
  payoutPaidAt    DateTime?           @map("payout_paid_at")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")

  ledgerEntries CycleLedgerEntry[]

  @@unique([cycleId, userId], name: "cycle_user_unique")
  @@index([cycleId])
  @@map("cycle_participations")
}

/// Temporary storage for OAuth state during character linking flow
model OAuthState {
  id           String   @id @default(uuid())
  state        String   @unique
  codeVerifier String   @map("code_verifier")
  userId       String?  @map("user_id")
  returnUrl    String?  @map("return_url")
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")

  @@index([state])
  @@index([expiresAt])
  @@map("oauth_states")
}

/// Buy commitment line per item per destination for a cycle
model CycleLine {
  id                   String   @id @default(uuid()) @map("id")
  cycleId              String   @map("cycle_id")
  cycle                Cycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  typeId               Int      @map("type_id")
  destinationStationId Int      @map("destination_station_id")
  plannedUnits         Int      @map("planned_units")
  unitsBought          Int      @default(0) @map("units_bought")
  buyCostIsk           Decimal  @default(0) @map("buy_cost_isk") @db.Decimal(28, 2)
  unitsSold            Int      @default(0) @map("units_sold")
  salesGrossIsk        Decimal  @default(0) @map("sales_gross_isk") @db.Decimal(28, 2)
  salesTaxIsk          Decimal  @default(0) @map("sales_tax_isk") @db.Decimal(28, 2)
  salesNetIsk          Decimal  @default(0) @map("sales_net_isk") @db.Decimal(28, 2)
  brokerFeesIsk        Decimal  @default(0) @map("broker_fees_isk") @db.Decimal(28, 2)
  relistFeesIsk        Decimal  @default(0) @map("relist_fees_isk") @db.Decimal(28, 2)
  currentSellPriceIsk  Decimal? @map("current_sell_price_isk") @db.Decimal(28, 2)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  buyAllocations  BuyAllocation[]
  sellAllocations SellAllocation[]

  @@index([cycleId])
  @@index([typeId])
  @@index([destinationStationId])
  @@index([cycleId, typeId])
  @@map("cycle_lines")
}

/// Links a wallet buy transaction to a cycle line with quantity allocated
model BuyAllocation {
  id                  String    @id @default(uuid()) @map("id")
  walletCharacterId   Int       @map("wallet_character_id")
  walletTransactionId BigInt    @map("wallet_transaction_id")
  lineId              String    @map("line_id")
  line                CycleLine @relation(fields: [lineId], references: [id], onDelete: Cascade)
  quantity            Int       @map("quantity")
  unitPrice           Decimal   @map("unit_price") @db.Decimal(28, 2)
  createdAt           DateTime  @default(now()) @map("created_at")

  @@unique([walletCharacterId, walletTransactionId, lineId])
  @@index([lineId])
  @@index([walletCharacterId, walletTransactionId])
  @@map("buy_allocations")
}

/// Links a wallet sell transaction to a cycle line with quantity allocated
model SellAllocation {
  id                  String    @id @default(uuid()) @map("id")
  walletCharacterId   Int       @map("wallet_character_id")
  walletTransactionId BigInt    @map("wallet_transaction_id")
  lineId              String    @map("line_id")
  line                CycleLine @relation(fields: [lineId], references: [id], onDelete: Cascade)
  quantity            Int       @map("quantity")
  unitPrice           Decimal   @map("unit_price") @db.Decimal(28, 2)
  revenueIsk          Decimal   @map("revenue_isk") @db.Decimal(28, 2)
  taxIsk              Decimal   @map("tax_isk") @db.Decimal(28, 2)
  createdAt           DateTime  @default(now()) @map("created_at")

  @@unique([walletCharacterId, walletTransactionId, lineId])
  @@index([lineId])
  @@index([walletCharacterId, walletTransactionId])
  @@map("sell_allocations")
}

/// Cycle-level fees (transport, etc.) not tied to specific items
model CycleFeeEvent {
  id         String   @id @default(uuid()) @map("id")
  cycleId    String   @map("cycle_id")
  cycle      Cycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  feeType    String   @map("fee_type") // transport | other
  amountIsk  Decimal  @map("amount_isk") @db.Decimal(28, 2)
  occurredAt DateTime @default(now()) @map("occurred_at")
  memo       String?  @map("memo")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([cycleId])
  @@index([occurredAt])
  @@map("cycle_fee_events")
}

/// Periodic snapshots for tracking cash, inventory, and profit over time
model CycleSnapshot {
  id             String   @id @default(uuid()) @map("id")
  cycleId        String   @map("cycle_id")
  cycle          Cycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  snapshotAt     DateTime @map("snapshot_at")
  walletCashIsk  Decimal  @map("wallet_cash_isk") @db.Decimal(28, 2)
  inventoryIsk   Decimal  @map("inventory_isk") @db.Decimal(28, 2)
  cycleProfitIsk Decimal  @map("cycle_profit_isk") @db.Decimal(28, 2)
  createdAt      DateTime @default(now()) @map("created_at")

  @@index([cycleId])
  @@index([snapshotAt])
  @@map("cycle_snapshots")
}
